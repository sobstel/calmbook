import { NowRequest, NowResponse } from "@now/node";
import axios from "axios";
import { setupCache } from "axios-cache-adapter";
import cheerio from "cheerio";
import moment from "moment";
import buildPage from "../builders/buildPage";

const cache = setupCache({ maxAge: 5 * 60 * 1000 });

// @ts-ignore
const cachedAxios = axios.create({ adapter: cache.adapter });

export default async (req: NowRequest, res: NowResponse) => {
  try {
    const format = getFormat(req.url);

    const url = sanitizeUrl(req.url);
    if (!url) {
      throw new Error(
        "provide valid page url, eg. https://calmbook.sobstel.now.sh/TurismoArgentina"
      );
    }

    const response = await cachedAxios.get(
      `https://www.facebook.com/${url}/posts`
    );

    const $ = cheerio.load(response.data);
    const page: Page = buildPage($);

    const render = pug.compileFile(`${__dirname}/views/page.${format}.pug`);
    const output = render({ page, moment });

    if (format === "xml") {
      res.setHeader("Content-Type", "application/atom+xml");
    }

    res.status(200).send(output);
  } catch (error) {
    res.setHeader("Content-Type", "text/html");
    res.status(500).send(`<center>${error.message}</center>`);
  }
};

const getFormat = (url: string | undefined): string => {
  if (url && url.includes(".xml")) {
    return "xml";
  }
  return "html";
};

const sanitizeUrl = (url: string | undefined): string | null => {
  if (!url) return null;

  let sanitizedUrl = url;
  sanitizedUrl = sanitizedUrl.trim();
  sanitizedUrl = sanitizedUrl.replace(/\/+$/g, ""); // trailing slashes
  sanitizedUrl = sanitizedUrl.replace(/^\/+/g, ""); // leading slashes
  sanitizedUrl = sanitizedUrl.replace(/\.\w{3}$/, ""); // extension (format)
  sanitizedUrl = sanitizedUrl.replace(/#.+$/, ""); // fragment link

  return sanitizedUrl;
};
