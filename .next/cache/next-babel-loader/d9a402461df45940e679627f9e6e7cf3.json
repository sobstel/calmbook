{"ast":null,"code":"var _jsxFileName = \"/Users/sobstel/Projects/calmbook/pages/[slug].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport { setupCache } from \"axios-cache-adapter\";\nconst cache = setupCache({\n  maxAge: 5 * 60 * 1000\n}); // @ts-ignore\n\nconst cachedAxios = axios.create({\n  adapter: cache.adapter\n});\nexport default function CalmbookPage({\n  data\n}) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, data);\n}\nexport async function getServerSideProps({\n  query\n}) {\n  const {\n    slug\n  } = query; // TODO: check for context.preview\n\n  const sanitizedSlug = sanitizeSlug(slug);\n\n  if (!sanitizedSlug) {\n    throw new Error(\"provide valid page url, eg. https://calmbook.sobstel.now.sh/TurismoArgentina\");\n  }\n\n  const response = await cachedAxios.get(`https://www.facebook.com/${sanitizedSlug}/posts`); // TODO: prase to JSON using builders or so\n  // const $ = cheerio.load(response.data);\n  // Pass JSON here\n\n  return {\n    props: {\n      data: response.data\n    }\n  };\n}\n\nconst sanitizeSlug = url => {\n  if (!url) return;\n  let sanitizedUrl = url;\n  sanitizedUrl = sanitizedUrl.trim();\n  sanitizedUrl = sanitizedUrl.replace(/\\/+$/g, \"\"); // trailing slashes\n\n  sanitizedUrl = sanitizedUrl.replace(/^\\/+/g, \"\"); // leading slashes\n\n  sanitizedUrl = sanitizedUrl.replace(/\\.\\w{3}$/, \"\"); // extension (format)\n\n  sanitizedUrl = sanitizedUrl.replace(/#.+$/, \"\"); // fragment link\n\n  return sanitizedUrl;\n};","map":{"version":3,"sources":["/Users/sobstel/Projects/calmbook/pages/[slug].tsx"],"names":["axios","setupCache","cache","maxAge","cachedAxios","create","adapter","CalmbookPage","data","getServerSideProps","query","slug","sanitizedSlug","sanitizeSlug","Error","response","get","props","url","sanitizedUrl","trim","replace"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAGA,MAAMC,KAAK,GAAGD,UAAU,CAAC;AAAEE,EAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS;AAAnB,CAAD,CAAxB,C,CACA;;AACA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAEJ,KAAK,CAACI;AAAjB,CAAb,CAApB;AAMA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAuC;AAEpD,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAN,CAAR;AACD;AAED,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAA8D;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB,CADmE,CAGnE;;AAEA,QAAME,aAAa,GAAGC,YAAY,CAACF,IAAD,CAAlC;;AACA,MAAI,CAACC,aAAL,EAAoB;AAClB,UAAM,IAAIE,KAAJ,CACJ,8EADI,CAAN;AAGD;;AAED,QAAMC,QAAQ,GAAG,MAAMX,WAAW,CAACY,GAAZ,CACpB,4BAA2BJ,aAAc,QADrB,CAAvB,CAZmE,CAgBnE;AACA;AAEA;;AACA,SAAO;AAAEK,IAAAA,KAAK,EAAE;AAAET,MAAAA,IAAI,EAAEO,QAAQ,CAACP;AAAjB;AAAT,GAAP;AACD;;AAED,MAAMK,YAAY,GAAIK,GAAD,IAAsC;AACzD,MAAI,CAACA,GAAL,EAAU;AAEV,MAAIC,YAAY,GAAGD,GAAnB;AACAC,EAAAA,YAAY,GAAGA,YAAY,CAACC,IAAb,EAAf;AACAD,EAAAA,YAAY,GAAGA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAf,CALyD,CAKP;;AAClDF,EAAAA,YAAY,GAAGA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAf,CANyD,CAMP;;AAClDF,EAAAA,YAAY,GAAGA,YAAY,CAACE,OAAb,CAAqB,UAArB,EAAiC,EAAjC,CAAf,CAPyD,CAOJ;;AACrDF,EAAAA,YAAY,GAAGA,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAf,CARyD,CAQR;;AAEjD,SAAOF,YAAP;AACD,CAXD","sourcesContent":["import { NextPageContext } from \"next\";\nimport axios from \"axios\";\nimport { setupCache } from \"axios-cache-adapter\";\nimport cheerio from \"cheerio\";\n\nconst cache = setupCache({ maxAge: 5 * 60 * 1000 });\n// @ts-ignore\nconst cachedAxios = axios.create({ adapter: cache.adapter });\n\ntype Props = {\n  data: string;\n}\n\nexport default function CalmbookPage({ data }: Props) {\n\n  return (<div>{data}</div>);\n}\n\nexport async function getServerSideProps({ query }: NextPageContext) {\n  const { slug } = query;\n\n  // TODO: check for context.preview\n\n  const sanitizedSlug = sanitizeSlug(slug as string);\n  if (!sanitizedSlug) {\n    throw new Error(\n      \"provide valid page url, eg. https://calmbook.sobstel.now.sh/TurismoArgentina\"\n    );\n  }\n\n  const response = await cachedAxios.get(\n    `https://www.facebook.com/${sanitizedSlug}/posts`\n  );\n\n  // TODO: prase to JSON using builders or so\n  // const $ = cheerio.load(response.data);\n\n  // Pass JSON here\n  return { props: { data: response.data } }\n}\n\nconst sanitizeSlug = (url?: string): string | undefined => {\n  if (!url) return;\n\n  let sanitizedUrl = url;\n  sanitizedUrl = sanitizedUrl.trim();\n  sanitizedUrl = sanitizedUrl.replace(/\\/+$/g, \"\"); // trailing slashes\n  sanitizedUrl = sanitizedUrl.replace(/^\\/+/g, \"\"); // leading slashes\n  sanitizedUrl = sanitizedUrl.replace(/\\.\\w{3}$/, \"\"); // extension (format)\n  sanitizedUrl = sanitizedUrl.replace(/#.+$/, \"\"); // fragment link\n\n  return sanitizedUrl;\n}\n"]},"metadata":{},"sourceType":"module"}